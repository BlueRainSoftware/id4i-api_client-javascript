/**
 * ID4i API
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.7.2-SNAPSHOT
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiError', 'model/ChangeRoleRequest', 'model/Organization', 'model/OrganizationAddress', 'model/OrganizationUpdate', 'model/OrganizationUserInvitationListRequest', 'model/PaginatedCountryResponse', 'model/PaginatedGuidCollection', 'model/PaginatedOrganizationResponse', 'model/PaginatedStringResponse', 'model/PaginatedUserPresentationResponse', 'model/PaginatedUserRolesResponse', 'model/PublicImagePresentation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiError'), require('../model/ChangeRoleRequest'), require('../model/Organization'), require('../model/OrganizationAddress'), require('../model/OrganizationUpdate'), require('../model/OrganizationUserInvitationListRequest'), require('../model/PaginatedCountryResponse'), require('../model/PaginatedGuidCollection'), require('../model/PaginatedOrganizationResponse'), require('../model/PaginatedStringResponse'), require('../model/PaginatedUserPresentationResponse'), require('../model/PaginatedUserRolesResponse'), require('../model/PublicImagePresentation'));
  } else {
    // Browser globals (root is window)
    if (!root.Id4iApi) {
      root.Id4iApi = {};
    }
    root.Id4iApi.OrganizationsApi = factory(root.Id4iApi.ApiClient, root.Id4iApi.ApiError, root.Id4iApi.ChangeRoleRequest, root.Id4iApi.Organization, root.Id4iApi.OrganizationAddress, root.Id4iApi.OrganizationUpdate, root.Id4iApi.OrganizationUserInvitationListRequest, root.Id4iApi.PaginatedCountryResponse, root.Id4iApi.PaginatedGuidCollection, root.Id4iApi.PaginatedOrganizationResponse, root.Id4iApi.PaginatedStringResponse, root.Id4iApi.PaginatedUserPresentationResponse, root.Id4iApi.PaginatedUserRolesResponse, root.Id4iApi.PublicImagePresentation);
  }
}(this, function(ApiClient, ApiError, ChangeRoleRequest, Organization, OrganizationAddress, OrganizationUpdate, OrganizationUserInvitationListRequest, PaginatedCountryResponse, PaginatedGuidCollection, PaginatedOrganizationResponse, PaginatedStringResponse, PaginatedUserPresentationResponse, PaginatedUserRolesResponse, PublicImagePresentation) {
  'use strict';

  /**
   * Organizations service.
   * @module api/OrganizationsApi
   * @version 0.7.2-SNAPSHOT
   */

  /**
   * Constructs a new OrganizationsApi. 
   * @alias module:api/OrganizationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addUserRoles operation.
     * @callback module:api/OrganizationsApi~addUserRolesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add role(s) to user
     * @param {String} organizationId The namespace of the organization
     * @param {String} username username
     * @param {module:model/ChangeRoleRequest} changeRoleRequest changeRoleRequest
     * @param {module:api/OrganizationsApi~addUserRolesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addUserRoles = function(organizationId, username, changeRoleRequest, callback) {
      var postBody = changeRoleRequest;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling addUserRoles");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling addUserRoles");
      }

      // verify the required parameter 'changeRoleRequest' is set
      if (changeRoleRequest === undefined || changeRoleRequest === null) {
        throw new Error("Missing the required parameter 'changeRoleRequest' when calling addUserRoles");
      }


      var pathParams = {
        'organizationId': organizationId,
        'username': username
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users/{username}/roles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganization operation.
     * @callback module:api/OrganizationsApi~createOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create organization
     * Creating a new organization.
     * @param {module:model/Organization} organization Organization to be created
     * @param {module:api/OrganizationsApi~createOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    this.createOrganization = function(organization, callback) {
      var postBody = organization;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling createOrganization");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Organization;

      return this.apiClient.callApi(
        '/api/v1/organizations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganization operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete organization
     * @param {String} organizationId The namespace of the organization to be deleted.
     * @param {module:api/OrganizationsApi~deleteOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrganization = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganization");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationBillingAddress operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationBillingAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove billing address
     * @param {String} organizationId organizationId
     * @param {module:api/OrganizationsApi~deleteOrganizationBillingAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrganizationBillingAddress = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationBillingAddress");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/addresses/billing', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationLogo operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationLogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete organization logo
     * @param {String} organizationId The namespace of the organization where the logo should be deleted.
     * @param {module:api/OrganizationsApi~deleteOrganizationLogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrganizationLogo = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationLogo");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/logo', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findOrganization operation.
     * @callback module:api/OrganizationsApi~findOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find organization by id/namespace
     * Returns a single organization.
     * @param {String} organizationId The namespace of the organization to be retrieved.
     * @param {module:api/OrganizationsApi~findOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    this.findOrganization = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findOrganization");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Organization;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findOrganizationAddress operation.
     * @callback module:api/OrganizationsApi~findOrganizationAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve address
     * @param {String} organizationId organizationId
     * @param {module:api/OrganizationsApi~findOrganizationAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationAddress}
     */
    this.findOrganizationAddress = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findOrganizationAddress");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = OrganizationAddress;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/addresses/default', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findOrganizationBillingAddress operation.
     * @callback module:api/OrganizationsApi~findOrganizationBillingAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve billing address
     * @param {String} organizationId organizationId
     * @param {module:api/OrganizationsApi~findOrganizationBillingAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationAddress}
     */
    this.findOrganizationBillingAddress = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findOrganizationBillingAddress");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = OrganizationAddress;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/addresses/billing', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCollectionsOfOrganization operation.
     * @callback module:api/OrganizationsApi~getAllCollectionsOfOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedGuidCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collections of organization
     * Retrieving all collections of an organization in a paginated manner.
     * @param {String} organizationId The namespace of the organization
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Start with the n-th element
     * @param {Number} opts.limit The maximum count of returned elements
     * @param {module:model/String} opts.type Filter by this type
     * @param {String} opts.label Filter by this label
     * @param {String} opts.labelPrefix Filter by this label prefix
     * @param {module:api/OrganizationsApi~getAllCollectionsOfOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedGuidCollection}
     */
    this.getAllCollectionsOfOrganization = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getAllCollectionsOfOrganization");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'label': opts['label'],
        'labelPrefix': opts['labelPrefix'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = PaginatedGuidCollection;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/collections', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllOrganizationRoles operation.
     * @callback module:api/OrganizationsApi~getAllOrganizationRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedUserRolesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users and their roles
     * Listing users and their roles in a paginated manner.
     * @param {String} organizationId organizationId
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Start with the n-th element
     * @param {Number} opts.limit The maximum count of returned elements
     * @param {module:api/OrganizationsApi~getAllOrganizationRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedUserRolesResponse}
     */
    this.getAllOrganizationRoles = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getAllOrganizationRoles");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = PaginatedUserRolesResponse;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/roles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsOfUser operation.
     * @callback module:api/OrganizationsApi~getOrganizationsOfUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedOrganizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve organizations of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.role role
     * @param {Number} opts.offset Start with the n-th element
     * @param {Number} opts.limit The maximum count of returned elements
     * @param {module:api/OrganizationsApi~getOrganizationsOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedOrganizationResponse}
     */
    this.getOrganizationsOfUser = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'role': opts['role'],
        'offset': opts['offset'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = PaginatedOrganizationResponse;

      return this.apiClient.callApi(
        '/api/v1/user/organizations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserRoles operation.
     * @callback module:api/OrganizationsApi~getUserRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedStringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user roles by username
     * @param {String} organizationId The namespace of the organization
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Start with the n-th element
     * @param {Number} opts.limit The maximum count of returned elements
     * @param {module:api/OrganizationsApi~getUserRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedStringResponse}
     */
    this.getUserRoles = function(organizationId, username, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getUserRoles");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserRoles");
      }


      var pathParams = {
        'organizationId': organizationId,
        'username': username
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = PaginatedStringResponse;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users/{username}/roles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersOfOrganization operation.
     * @callback module:api/OrganizationsApi~getUsersOfOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedUserPresentationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find users in organization
     * Finding users in the specified organization in a paginated manner.
     * @param {String} organizationId organizationId
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Start with the n-th element
     * @param {Number} opts.limit The maximum count of returned elements
     * @param {module:api/OrganizationsApi~getUsersOfOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedUserPresentationResponse}
     */
    this.getUsersOfOrganization = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getUsersOfOrganization");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = PaginatedUserPresentationResponse;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the inviteUsers operation.
     * @callback module:api/OrganizationsApi~inviteUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite Users
     * @param {String} organizationId The namespace of the organization where users should be invited
     * @param {module:model/OrganizationUserInvitationListRequest} invitationList invitationList
     * @param {module:api/OrganizationsApi~inviteUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.inviteUsers = function(organizationId, invitationList, callback) {
      var postBody = invitationList;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling inviteUsers");
      }

      // verify the required parameter 'invitationList' is set
      if (invitationList === undefined || invitationList === null) {
        throw new Error("Missing the required parameter 'invitationList' when calling inviteUsers");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users/invite', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listCountries operation.
     * @callback module:api/OrganizationsApi~listCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedCountryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List countries
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Start with the n-th element
     * @param {Number} opts.limit The maximum count of returned elements
     * @param {module:api/OrganizationsApi~listCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedCountryResponse}
     */
    this.listCountries = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = PaginatedCountryResponse;

      return this.apiClient.callApi(
        '/api/v1/countries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserRoles operation.
     * @callback module:api/OrganizationsApi~removeUserRolesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove role(s) from user
     * @param {String} organizationId The namespace of the organization
     * @param {String} username username
     * @param {module:model/ChangeRoleRequest} changeRoleRequest changeRoleRequest
     * @param {module:api/OrganizationsApi~removeUserRolesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeUserRoles = function(organizationId, username, changeRoleRequest, callback) {
      var postBody = changeRoleRequest;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling removeUserRoles");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling removeUserRoles");
      }

      // verify the required parameter 'changeRoleRequest' is set
      if (changeRoleRequest === undefined || changeRoleRequest === null) {
        throw new Error("Missing the required parameter 'changeRoleRequest' when calling removeUserRoles");
      }


      var pathParams = {
        'organizationId': organizationId,
        'username': username
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/users/{username}/roles', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setOrganizationLogo operation.
     * @callback module:api/OrganizationsApi~setOrganizationLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicImagePresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update organization logo
     * Updating an organization logo using a multipart file upload.
     * @param {String} organizationId The namespace of the organization where the logo should be updated.
     * @param {File} file An image containing the new logo.
     * @param {module:api/OrganizationsApi~setOrganizationLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicImagePresentation}
     */
    this.setOrganizationLogo = function(organizationId, file, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling setOrganizationLogo");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling setOrganizationLogo");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': file
      };

      var authNames = ['Authorization'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = PublicImagePresentation;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/logo', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganization operation.
     * @callback module:api/OrganizationsApi~updateOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update organization
     * @param {String} organizationId The namespace of the organization to be updated.
     * @param {module:model/OrganizationUpdate} organizationUpdate Updated organization object
     * @param {module:api/OrganizationsApi~updateOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    this.updateOrganization = function(organizationId, organizationUpdate, callback) {
      var postBody = organizationUpdate;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganization");
      }

      // verify the required parameter 'organizationUpdate' is set
      if (organizationUpdate === undefined || organizationUpdate === null) {
        throw new Error("Missing the required parameter 'organizationUpdate' when calling updateOrganization");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Organization;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAddress operation.
     * @callback module:api/OrganizationsApi~updateOrganizationAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store address
     * @param {String} organizationId organizationId
     * @param {module:model/OrganizationAddress} addressResource addressResource
     * @param {module:api/OrganizationsApi~updateOrganizationAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationAddress}
     */
    this.updateOrganizationAddress = function(organizationId, addressResource, callback) {
      var postBody = addressResource;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAddress");
      }

      // verify the required parameter 'addressResource' is set
      if (addressResource === undefined || addressResource === null) {
        throw new Error("Missing the required parameter 'addressResource' when calling updateOrganizationAddress");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = OrganizationAddress;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/addresses/default', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationBillingAddress operation.
     * @callback module:api/OrganizationsApi~updateOrganizationBillingAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store billing address
     * @param {String} organizationId organizationId
     * @param {module:model/OrganizationAddress} addressResource addressResource
     * @param {module:api/OrganizationsApi~updateOrganizationBillingAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationAddress}
     */
    this.updateOrganizationBillingAddress = function(organizationId, addressResource, callback) {
      var postBody = addressResource;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationBillingAddress");
      }

      // verify the required parameter 'addressResource' is set
      if (addressResource === undefined || addressResource === null) {
        throw new Error("Missing the required parameter 'addressResource' when calling updateOrganizationBillingAddress");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = OrganizationAddress;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/addresses/billing', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
