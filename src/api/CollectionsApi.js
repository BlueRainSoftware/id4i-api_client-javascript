/**
 * ID4i API
 * HTTP API Documentation for ID4i
 *
 * OpenAPI spec version: 0.1.4-SNAPSHOT
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiError', 'model/CreateLabelledCollectionRequest', 'model/CreateLogisticCollectionRequest', 'model/CreateRoutingCollectionRequest', 'model/GuidCollection', 'model/Id4n', 'model/ListOfId4ns', 'model/PaginatedGuidCollection', 'model/PaginatedGuidResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiError'), require('../model/CreateLabelledCollectionRequest'), require('../model/CreateLogisticCollectionRequest'), require('../model/CreateRoutingCollectionRequest'), require('../model/GuidCollection'), require('../model/Id4n'), require('../model/ListOfId4ns'), require('../model/PaginatedGuidCollection'), require('../model/PaginatedGuidResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Id4iApi) {
      root.Id4iApi = {};
    }
    root.Id4iApi.CollectionsApi = factory(root.Id4iApi.ApiClient, root.Id4iApi.ApiError, root.Id4iApi.CreateLabelledCollectionRequest, root.Id4iApi.CreateLogisticCollectionRequest, root.Id4iApi.CreateRoutingCollectionRequest, root.Id4iApi.GuidCollection, root.Id4iApi.Id4n, root.Id4iApi.ListOfId4ns, root.Id4iApi.PaginatedGuidCollection, root.Id4iApi.PaginatedGuidResponse);
  }
}(this, function(ApiClient, ApiError, CreateLabelledCollectionRequest, CreateLogisticCollectionRequest, CreateRoutingCollectionRequest, GuidCollection, Id4n, ListOfId4ns, PaginatedGuidCollection, PaginatedGuidResponse) {
  'use strict';

  /**
   * Collections service.
   * @module api/CollectionsApi
   * @version 0.1.4-SNAPSHOT
   */

  /**
   * Constructs a new CollectionsApi. 
   * @alias module:api/CollectionsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addElementToCollection operation.
     * @callback module:api/CollectionsApi~addElementToCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add element to collection
     * @param {String} id4n id4n
     * @param {String} elementGuid elementGuid
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~addElementToCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.addElementToCollection = function(id4n, elementGuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling addElementToCollection");
      }

      // verify the required parameter 'elementGuid' is set
      if (elementGuid === undefined || elementGuid === null) {
        throw new Error("Missing the required parameter 'elementGuid' when calling addElementToCollection");
      }


      var pathParams = {
        'id4n': id4n,
        'elementGuid': elementGuid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}/elements/{elementGuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addElementToLabelledCollection operation.
     * @callback module:api/CollectionsApi~addElementToLabelledCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add element to labelled collection
     * @param {String} collectionId4n collectionId4n
     * @param {String} elementGuid elementGuid
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~addElementToLabelledCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.addElementToLabelledCollection = function(collectionId4n, elementGuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'collectionId4n' is set
      if (collectionId4n === undefined || collectionId4n === null) {
        throw new Error("Missing the required parameter 'collectionId4n' when calling addElementToLabelledCollection");
      }

      // verify the required parameter 'elementGuid' is set
      if (elementGuid === undefined || elementGuid === null) {
        throw new Error("Missing the required parameter 'elementGuid' when calling addElementToLabelledCollection");
      }


      var pathParams = {
        'collectionId4n': collectionId4n,
        'elementGuid': elementGuid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/labelled/{collectionId4n}/elements/{elementGuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addElementToLogisticCollection operation.
     * @callback module:api/CollectionsApi~addElementToLogisticCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add element to logistic collection
     * @param {String} collectionId4n collectionId4n
     * @param {String} guid guid
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~addElementToLogisticCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.addElementToLogisticCollection = function(collectionId4n, guid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'collectionId4n' is set
      if (collectionId4n === undefined || collectionId4n === null) {
        throw new Error("Missing the required parameter 'collectionId4n' when calling addElementToLogisticCollection");
      }

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling addElementToLogisticCollection");
      }


      var pathParams = {
        'collectionId4n': collectionId4n,
        'guid': guid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/logistic/{collectionId4n}/elements/{guid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addElementToRoutingCollection operation.
     * @callback module:api/CollectionsApi~addElementToRoutingCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add element to routing collection
     * @param {String} collectionId4n collectionId4n
     * @param {String} guid guid
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~addElementToRoutingCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.addElementToRoutingCollection = function(collectionId4n, guid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'collectionId4n' is set
      if (collectionId4n === undefined || collectionId4n === null) {
        throw new Error("Missing the required parameter 'collectionId4n' when calling addElementToRoutingCollection");
      }

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling addElementToRoutingCollection");
      }


      var pathParams = {
        'collectionId4n': collectionId4n,
        'guid': guid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/routing/{collectionId4n}/elements/{guid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addElementsToCollection operation.
     * @callback module:api/CollectionsApi~addElementsToCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add elements to collection
     * @param {String} id4n id4n
     * @param {module:model/ListOfId4ns} listOfGuids listOfGuids
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~addElementsToCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.addElementsToCollection = function(id4n, listOfGuids, opts, callback) {
      opts = opts || {};
      var postBody = listOfGuids;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling addElementsToCollection");
      }

      // verify the required parameter 'listOfGuids' is set
      if (listOfGuids === undefined || listOfGuids === null) {
        throw new Error("Missing the required parameter 'listOfGuids' when calling addElementsToCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}/elements', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addElementsToLabelledCollection operation.
     * @callback module:api/CollectionsApi~addElementsToLabelledCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add elements to labelled collection
     * @param {String} collectionId4n collectionId4n
     * @param {module:model/ListOfId4ns} listOfGuids listOfGuids
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~addElementsToLabelledCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.addElementsToLabelledCollection = function(collectionId4n, listOfGuids, opts, callback) {
      opts = opts || {};
      var postBody = listOfGuids;

      // verify the required parameter 'collectionId4n' is set
      if (collectionId4n === undefined || collectionId4n === null) {
        throw new Error("Missing the required parameter 'collectionId4n' when calling addElementsToLabelledCollection");
      }

      // verify the required parameter 'listOfGuids' is set
      if (listOfGuids === undefined || listOfGuids === null) {
        throw new Error("Missing the required parameter 'listOfGuids' when calling addElementsToLabelledCollection");
      }


      var pathParams = {
        'collectionId4n': collectionId4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/labelled/{collectionId4n}/elements', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addElementsToLogisticCollection operation.
     * @callback module:api/CollectionsApi~addElementsToLogisticCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add elements to logistic collection
     * @param {String} collectionId4n collectionId4n
     * @param {module:model/ListOfId4ns} listOfGuids listOfGuids
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~addElementsToLogisticCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.addElementsToLogisticCollection = function(collectionId4n, listOfGuids, opts, callback) {
      opts = opts || {};
      var postBody = listOfGuids;

      // verify the required parameter 'collectionId4n' is set
      if (collectionId4n === undefined || collectionId4n === null) {
        throw new Error("Missing the required parameter 'collectionId4n' when calling addElementsToLogisticCollection");
      }

      // verify the required parameter 'listOfGuids' is set
      if (listOfGuids === undefined || listOfGuids === null) {
        throw new Error("Missing the required parameter 'listOfGuids' when calling addElementsToLogisticCollection");
      }


      var pathParams = {
        'collectionId4n': collectionId4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/logistic/{collectionId4n}/elements', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addElementsToRoutingCollection operation.
     * @callback module:api/CollectionsApi~addElementsToRoutingCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add element to routing collection
     * @param {String} collectionId4n collectionId4n
     * @param {module:model/ListOfId4ns} listOfGuids listOfGuids
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~addElementsToRoutingCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.addElementsToRoutingCollection = function(collectionId4n, listOfGuids, opts, callback) {
      opts = opts || {};
      var postBody = listOfGuids;

      // verify the required parameter 'collectionId4n' is set
      if (collectionId4n === undefined || collectionId4n === null) {
        throw new Error("Missing the required parameter 'collectionId4n' when calling addElementsToRoutingCollection");
      }

      // verify the required parameter 'listOfGuids' is set
      if (listOfGuids === undefined || listOfGuids === null) {
        throw new Error("Missing the required parameter 'listOfGuids' when calling addElementsToRoutingCollection");
      }


      var pathParams = {
        'collectionId4n': collectionId4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/routing/{collectionId4n}/elements', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createLabelledCollection operation.
     * @callback module:api/CollectionsApi~createLabelledCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Id4n} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create labelled collection
     * @param {module:model/CreateLabelledCollectionRequest} createInfo createInfo
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~createLabelledCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Id4n}
     */
    this.createLabelledCollection = function(createInfo, opts, callback) {
      opts = opts || {};
      var postBody = createInfo;

      // verify the required parameter 'createInfo' is set
      if (createInfo === undefined || createInfo === null) {
        throw new Error("Missing the required parameter 'createInfo' when calling createLabelledCollection");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = Id4n;

      return this.apiClient.callApi(
        '/api/v1/collections/labelled', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createLogisticCollection operation.
     * @callback module:api/CollectionsApi~createLogisticCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Id4n} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create logistic collection
     * @param {module:model/CreateLogisticCollectionRequest} createInfo createInfo
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~createLogisticCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Id4n}
     */
    this.createLogisticCollection = function(createInfo, opts, callback) {
      opts = opts || {};
      var postBody = createInfo;

      // verify the required parameter 'createInfo' is set
      if (createInfo === undefined || createInfo === null) {
        throw new Error("Missing the required parameter 'createInfo' when calling createLogisticCollection");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = Id4n;

      return this.apiClient.callApi(
        '/api/v1/collections/logistic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRoutingCollection operation.
     * @callback module:api/CollectionsApi~createRoutingCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Id4n} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create routing collecton
     * @param {module:model/CreateRoutingCollectionRequest} createInfo createInfo
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~createRoutingCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Id4n}
     */
    this.createRoutingCollection = function(createInfo, opts, callback) {
      opts = opts || {};
      var postBody = createInfo;

      // verify the required parameter 'createInfo' is set
      if (createInfo === undefined || createInfo === null) {
        throw new Error("Missing the required parameter 'createInfo' when calling createRoutingCollection");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = Id4n;

      return this.apiClient.callApi(
        '/api/v1/collections/routing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollection operation.
     * @callback module:api/CollectionsApi~deleteCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~deleteCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.deleteCollection = function(id4n, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling deleteCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLabelledCollection operation.
     * @callback module:api/CollectionsApi~deleteLabelledCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete labelled collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~deleteLabelledCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.deleteLabelledCollection = function(id4n, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling deleteLabelledCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/labelled/{id4n}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLogisticCollection operation.
     * @callback module:api/CollectionsApi~deleteLogisticCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete logistic collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~deleteLogisticCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteLogisticCollection = function(id4n, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling deleteLogisticCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/collections/logistic/{id4n}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoutingCollection operation.
     * @callback module:api/CollectionsApi~deleteRoutingCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete routing collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~deleteRoutingCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.deleteRoutingCollection = function(id4n, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling deleteRoutingCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/routing/{id4n}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findCollection operation.
     * @callback module:api/CollectionsApi~findCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuidCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~findCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuidCollection}
     */
    this.findCollection = function(id4n, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling findCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = GuidCollection;

      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findLabelledCollection operation.
     * @callback module:api/CollectionsApi~findLabelledCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuidCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find labelled collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~findLabelledCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuidCollection}
     */
    this.findLabelledCollection = function(id4n, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling findLabelledCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = GuidCollection;

      return this.apiClient.callApi(
        '/api/v1/collections/labelled/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findLogisticCollection operation.
     * @callback module:api/CollectionsApi~findLogisticCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuidCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find logistic collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~findLogisticCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuidCollection}
     */
    this.findLogisticCollection = function(id4n, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling findLogisticCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = GuidCollection;

      return this.apiClient.callApi(
        '/api/v1/collections/logistic/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findRoutingCollection operation.
     * @callback module:api/CollectionsApi~findRoutingCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuidCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find routing collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~findRoutingCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuidCollection}
     */
    this.findRoutingCollection = function(id4n, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling findRoutingCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = GuidCollection;

      return this.apiClient.callApi(
        '/api/v1/collections/routing/{id4n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCollectionsOfOrganization operation.
     * @callback module:api/CollectionsApi~getAllCollectionsOfOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedGuidCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collections of organization
     * Retrieving all collections of an organization in a paginated manner.
     * @param {Number} organizationId organizationId
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {Number} opts.offset Start with the n-th element. 
     * @param {Number} opts.limit The maximum count of returned elements.
     * @param {module:model/String} opts.type Filter by this type
     * @param {String} opts.label Filter by this label
     * @param {String} opts.labelPrefix Filter by this label prefix
     * @param {module:api/CollectionsApi~getAllCollectionsOfOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedGuidCollection}
     */
    this.getAllCollectionsOfOrganization = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getAllCollectionsOfOrganization");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'label': opts['label'],
        'labelPrefix': opts['labelPrefix']
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = PaginatedGuidCollection;

      return this.apiClient.callApi(
        '/api/v1/organizations/{organizationId}/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listElementsOfCollection operation.
     * @callback module:api/CollectionsApi~listElementsOfCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedGuidResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List contents of the collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {Number} opts.offset Start with the n-th element. 
     * @param {Number} opts.limit The maximum count of returned elements.
     * @param {module:api/CollectionsApi~listElementsOfCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedGuidResponse}
     */
    this.listElementsOfCollection = function(id4n, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling listElementsOfCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = PaginatedGuidResponse;

      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}/elements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listElementsOfLabelledCollection operation.
     * @callback module:api/CollectionsApi~listElementsOfLabelledCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedGuidResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List contents of the collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {Number} opts.offset Start with the n-th element. 
     * @param {Number} opts.limit The maximum count of returned elements.
     * @param {module:api/CollectionsApi~listElementsOfLabelledCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedGuidResponse}
     */
    this.listElementsOfLabelledCollection = function(id4n, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling listElementsOfLabelledCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = PaginatedGuidResponse;

      return this.apiClient.callApi(
        '/api/v1/collections/labelled/{id4n}/elements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listElementsOfLogisticCollection operation.
     * @callback module:api/CollectionsApi~listElementsOfLogisticCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedGuidResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List contents of the collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {Number} opts.offset Start with the n-th element. 
     * @param {Number} opts.limit The maximum count of returned elements.
     * @param {module:api/CollectionsApi~listElementsOfLogisticCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedGuidResponse}
     */
    this.listElementsOfLogisticCollection = function(id4n, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling listElementsOfLogisticCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = PaginatedGuidResponse;

      return this.apiClient.callApi(
        '/api/v1/collections/logistic/{id4n}/elements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listElementsOfRoutingCollection operation.
     * @callback module:api/CollectionsApi~listElementsOfRoutingCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedGuidResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List contents of the collection
     * @param {String} id4n id4n
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {Number} opts.offset Start with the n-th element. 
     * @param {Number} opts.limit The maximum count of returned elements.
     * @param {module:api/CollectionsApi~listElementsOfRoutingCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedGuidResponse}
     */
    this.listElementsOfRoutingCollection = function(id4n, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling listElementsOfRoutingCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = PaginatedGuidResponse;

      return this.apiClient.callApi(
        '/api/v1/collections/routing/{id4n}/elements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementFromCollection operation.
     * @callback module:api/CollectionsApi~removeElementFromCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove element from collection
     * @param {String} id4n id4n
     * @param {String} elementGuid elementGuid
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~removeElementFromCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.removeElementFromCollection = function(id4n, elementGuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling removeElementFromCollection");
      }

      // verify the required parameter 'elementGuid' is set
      if (elementGuid === undefined || elementGuid === null) {
        throw new Error("Missing the required parameter 'elementGuid' when calling removeElementFromCollection");
      }


      var pathParams = {
        'id4n': id4n,
        'elementGuid': elementGuid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}/elements/{elementGuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementFromLabelledCollection operation.
     * @callback module:api/CollectionsApi~removeElementFromLabelledCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove element from labelled collection
     * @param {String} collectionId4n collectionId4n
     * @param {String} elementGuid elementGuid
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~removeElementFromLabelledCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.removeElementFromLabelledCollection = function(collectionId4n, elementGuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'collectionId4n' is set
      if (collectionId4n === undefined || collectionId4n === null) {
        throw new Error("Missing the required parameter 'collectionId4n' when calling removeElementFromLabelledCollection");
      }

      // verify the required parameter 'elementGuid' is set
      if (elementGuid === undefined || elementGuid === null) {
        throw new Error("Missing the required parameter 'elementGuid' when calling removeElementFromLabelledCollection");
      }


      var pathParams = {
        'collectionId4n': collectionId4n,
        'elementGuid': elementGuid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/labelled/{collectionId4n}/elements/{elementGuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementFromLogisticCollection operation.
     * @callback module:api/CollectionsApi~removeElementFromLogisticCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove element from logistic collection
     * @param {String} collectionId4n collectionId4n
     * @param {String} guid guid
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~removeElementFromLogisticCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.removeElementFromLogisticCollection = function(collectionId4n, guid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'collectionId4n' is set
      if (collectionId4n === undefined || collectionId4n === null) {
        throw new Error("Missing the required parameter 'collectionId4n' when calling removeElementFromLogisticCollection");
      }

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling removeElementFromLogisticCollection");
      }


      var pathParams = {
        'collectionId4n': collectionId4n,
        'guid': guid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/logistic/{collectionId4n}/elements/{elementId4n}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementFromRoutingCollection operation.
     * @callback module:api/CollectionsApi~removeElementFromRoutingCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove element from routing collection
     * @param {String} collectionId4n collectionId4n
     * @param {String} guid guid
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~removeElementFromRoutingCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.removeElementFromRoutingCollection = function(collectionId4n, guid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'collectionId4n' is set
      if (collectionId4n === undefined || collectionId4n === null) {
        throw new Error("Missing the required parameter 'collectionId4n' when calling removeElementFromRoutingCollection");
      }

      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling removeElementFromRoutingCollection");
      }


      var pathParams = {
        'collectionId4n': collectionId4n,
        'guid': guid
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/routing/{collectionId4n}/elements/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementsFromCollection operation.
     * @callback module:api/CollectionsApi~removeElementsFromCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove elements from collection
     * @param {String} id4n id4n
     * @param {module:model/ListOfId4ns} listOfGuids listOfGuids
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~removeElementsFromCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.removeElementsFromCollection = function(id4n, listOfGuids, opts, callback) {
      opts = opts || {};
      var postBody = listOfGuids;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling removeElementsFromCollection");
      }

      // verify the required parameter 'listOfGuids' is set
      if (listOfGuids === undefined || listOfGuids === null) {
        throw new Error("Missing the required parameter 'listOfGuids' when calling removeElementsFromCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}/elements', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementsFromLabelledCollection operation.
     * @callback module:api/CollectionsApi~removeElementsFromLabelledCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove elements from labelled collection
     * @param {String} collectionId4n collectionId4n
     * @param {module:model/ListOfId4ns} listOfGuids listOfGuids
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~removeElementsFromLabelledCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.removeElementsFromLabelledCollection = function(collectionId4n, listOfGuids, opts, callback) {
      opts = opts || {};
      var postBody = listOfGuids;

      // verify the required parameter 'collectionId4n' is set
      if (collectionId4n === undefined || collectionId4n === null) {
        throw new Error("Missing the required parameter 'collectionId4n' when calling removeElementsFromLabelledCollection");
      }

      // verify the required parameter 'listOfGuids' is set
      if (listOfGuids === undefined || listOfGuids === null) {
        throw new Error("Missing the required parameter 'listOfGuids' when calling removeElementsFromLabelledCollection");
      }


      var pathParams = {
        'collectionId4n': collectionId4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/labelled/{collectionId4n}/elements', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementsFromLogisticCollection operation.
     * @callback module:api/CollectionsApi~removeElementsFromLogisticCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove elements from logistic collection
     * @param {String} collectionId4n collectionId4n
     * @param {module:model/ListOfId4ns} listOfGuids listOfGuids
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~removeElementsFromLogisticCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.removeElementsFromLogisticCollection = function(collectionId4n, listOfGuids, opts, callback) {
      opts = opts || {};
      var postBody = listOfGuids;

      // verify the required parameter 'collectionId4n' is set
      if (collectionId4n === undefined || collectionId4n === null) {
        throw new Error("Missing the required parameter 'collectionId4n' when calling removeElementsFromLogisticCollection");
      }

      // verify the required parameter 'listOfGuids' is set
      if (listOfGuids === undefined || listOfGuids === null) {
        throw new Error("Missing the required parameter 'listOfGuids' when calling removeElementsFromLogisticCollection");
      }


      var pathParams = {
        'collectionId4n': collectionId4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/logistic/{collectionId4n}/elements', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeElementsFromRoutingCollection operation.
     * @callback module:api/CollectionsApi~removeElementsFromRoutingCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove elements from routing collection
     * @param {String} collectionId4n collectionId4n
     * @param {module:model/ListOfId4ns} listOfGuids listOfGuids
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~removeElementsFromRoutingCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiError}
     */
    this.removeElementsFromRoutingCollection = function(collectionId4n, listOfGuids, opts, callback) {
      opts = opts || {};
      var postBody = listOfGuids;

      // verify the required parameter 'collectionId4n' is set
      if (collectionId4n === undefined || collectionId4n === null) {
        throw new Error("Missing the required parameter 'collectionId4n' when calling removeElementsFromRoutingCollection");
      }

      // verify the required parameter 'listOfGuids' is set
      if (listOfGuids === undefined || listOfGuids === null) {
        throw new Error("Missing the required parameter 'listOfGuids' when calling removeElementsFromRoutingCollection");
      }


      var pathParams = {
        'collectionId4n': collectionId4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = ApiError;

      return this.apiClient.callApi(
        '/api/v1/collections/routing/{collectionId4n}/elements', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollection operation.
     * @callback module:api/CollectionsApi~updateCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Alter collection
     * @param {String} id4n id4n
     * @param {module:model/GuidCollection} request request
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~updateCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateCollection = function(id4n, request, opts, callback) {
      opts = opts || {};
      var postBody = request;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling updateCollection");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling updateCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/collections/{id4n}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLabelledCollection operation.
     * @callback module:api/CollectionsApi~updateLabelledCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename labelled collection
     * @param {String} id4n id4n
     * @param {module:model/GuidCollection} request request
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~updateLabelledCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateLabelledCollection = function(id4n, request, opts, callback) {
      opts = opts || {};
      var postBody = request;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling updateLabelledCollection");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling updateLabelledCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/collections/labelled/{id4n}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLogisticCollection operation.
     * @callback module:api/CollectionsApi~updateLogisticCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update logistic collection
     * @param {String} id4n id4n
     * @param {module:model/GuidCollection} request request
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~updateLogisticCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateLogisticCollection = function(id4n, request, opts, callback) {
      opts = opts || {};
      var postBody = request;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling updateLogisticCollection");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling updateLogisticCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/collections/logistic/{id4n}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoutingCollection operation.
     * @callback module:api/CollectionsApi~updateRoutingCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update routing collection
     * @param {String} id4n id4n
     * @param {module:model/GuidCollection} request request
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization JWT Bearer Token
     * @param {String} opts.acceptLanguage Requested language
     * @param {module:api/CollectionsApi~updateRoutingCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateRoutingCollection = function(id4n, request, opts, callback) {
      opts = opts || {};
      var postBody = request;

      // verify the required parameter 'id4n' is set
      if (id4n === undefined || id4n === null) {
        throw new Error("Missing the required parameter 'id4n' when calling updateRoutingCollection");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling updateRoutingCollection");
      }


      var pathParams = {
        'id4n': id4n
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization'],
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json;charset=UTF-8'];
      var accepts = ['application/xml', 'application/json;charset=UTF-8'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/collections/routing/{id4n}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
